using Fingo.Auth.AuthServer.Services;
using Fingo.Auth.AuthServer.Services.Implementation;
using Xunit;

namespace Fingo.Auth.AuthServer.Tests.Services.Implementation
{
    public class JwtLibraryWrapperServiceTest
    {
        private readonly JwtLibraryWrapperService _jwtLibraryWrapperService;

        private string _secretKey;

        public JwtLibraryWrapperServiceTest()
        {
            _secretKey = "TOP_SECRET_f!ngo_S3cr3+_P@ssW@rd~<i|\\|t3rn$hIp>/1337/";
            _jwtLibraryWrapperService = new JwtLibraryWrapperService();    
        }

        [Fact]
        public void DecodeShouldReturnTokenValid()
        {
            // arrange

            /* "login": "czwarty",
             * "password": "czwarty",
             * "project-guid": "01234567-89AB-CDEF-0123-456789ABCDEF"
             * "exp": 2132226191 -- should work till 26-07-2037 13:03:11 :-)
             * and our key was used
             * 
             * variable "jwtValid" generated by jwt.io website
             */

            string jwtValid =
                "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2dpbiI6ImN6d2FydHkiLCJwYXNzd29yZCI6ImN6d2FydHkiLCJwcm9qZWN0LWd1aWQiOiIwMTIzNDU2Ny04OUFCLUNERUYtMDEyMy00NTY3ODlBQkNERUYiLCJleHAiOjIxMzIyMjYxOTF9.HsVHbmWTCf1zfe2jjA3PKQZLONh4IzT-iu-LR8Trkhc";

            // act
            DecodeResult decodeResult = _jwtLibraryWrapperService.Decode(jwtValid, _secretKey);

            // assert
            Assert.Equal(decodeResult, DecodeResult.TokenValid);
        }

        [Fact]
        public void DecodeShouldReturnTokenInvalid()
        {
            // arrange

            /* "login": "czwarty",
            * "password": "czwarty",
            * "project-guid": "01234567-89AB-CDEF-0123-456789ABCDEF"
            * "exp": 2132226191 -- should work till 26-07-2037 13:03:11 :-)
            *  and "definitely_not_our_key" key was used
            * 
            * variable "jwtSignedWithWrongKey" generated by jwt.io website
            */

            string jwtSignedWithWrongKey =
                "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2dpbiI6ImN6d2FydHkiLCJwYXNzd29yZCI6ImN6d2FydHkiLCJwcm9qZWN0LWd1aWQiOiIwMTIzNDU2Ny04OUFCLUNERUYtMDEyMy00NTY3ODlBQkNERUYiLCJleHAiOjIxMzIyMjYxOTF9.bDlcSdMQMGuSZUmU7QhS1bjeHbNxSt23HiO28mxtR0M";

            // act
            DecodeResult decodeResult = _jwtLibraryWrapperService.Decode(jwtSignedWithWrongKey, _secretKey);

            // assert
            Assert.Equal(decodeResult, DecodeResult.TokenInvalid);
        }

        [Fact]
        public void DecodeShouldReturnTokenExpired()
        {
            // arrange

            /* "login": "czwarty",
            * "password": "czwarty",
            * "project-guid": "01234567-89AB-CDEF-0123-456789ABCDEF"
            * "exp": 1469539121 -- 26-07-2016 15:18:41
            * and our key was used
            * 
            * variable "jwtValidButExpired" generated by jwt.io website
            */

            string jwtValidButExpired =
                "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2dpbiI6ImN6d2FydHkiLCJwYXNzd29yZCI6ImN6d2FydHkiLCJwcm9qZWN0LWd1aWQiOiIwMTIzNDU2Ny04OUFCLUNERUYtMDEyMy00NTY3ODlBQkNERUYiLCJleHAiOjE0Njk1MzkxMjF9.CGtKXTlYWgx2ZNdGShFlXm7Tl0yNv6TlaYesUQGzvJY";

            // act
            DecodeResult decodeResult = _jwtLibraryWrapperService.Decode(jwtValidButExpired, _secretKey);

            // assert
            Assert.Equal(decodeResult, DecodeResult.TokenExpired);
        }
    }
}
