using System;
using System.Collections.Generic;
using System.Linq.Expressions;
using Fingo.Auth.AuthServer.Services.Implementation;
using Fingo.Auth.DbAccess.Models;
using Fingo.Auth.DbAccess.Repository.Interfaces;
using Fingo.Auth.Infrastructure.Logging;
using Fingo.Auth.JsonWrapper;
using Newtonsoft.Json;
using Xunit;
using Moq;
using Fingo.Auth.DbAccess.Models.Statuses;

namespace Fingo.Auth.AuthServer.Tests.Services.Implementation
{
    public class TokenServiceTest
    {
        private readonly JwtLibraryWrapperService _jwtLibraryWrapperService;
        private readonly ILogger<TokenService> _logger;

        private string _jwtValid;
        private string _jwtValidButExpired;
        private string _jwtSignedWithWrongKey;
        private Guid _sampleGuid;

        public TokenServiceTest()
        {
            _jwtLibraryWrapperService = new JwtLibraryWrapperService();
            _logger = new Logger<TokenService>();
            _sampleGuid = new Guid("01234567-89AB-CDEF-0123-456789ABCDEF");

            /* "login": "czwarty",
             * "password": "czwarty",
             * "project-guid": "01234567-89AB-CDEF-0123-456789ABCDEF"
             * "exp": 2132226191 -- should work till 26-07-2037 13:03:11 :-)
             * and our key was used
             *
             * variable "_jwtValid" generated by jwt.io website
             */

            _jwtValid =
                "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2dpbiI6ImN6d2FydHkiLCJwYXNzd29yZCI6ImN6d2FydHkiLCJwcm9qZWN0LWd1aWQiOiIwMTIzNDU2Ny04OUFCLUNERUYtMDEyMy00NTY3ODlBQkNERUYiLCJleHAiOjIxMzIyMjYxOTF9.HsVHbmWTCf1zfe2jjA3PKQZLONh4IzT-iu-LR8Trkhc";

            /* "login": "czwarty",
            * "password": "czwarty",
            * "project-guid": "01234567-89AB-CDEF-0123-456789ABCDEF"
            * "exp": 1469539121 -- 26-07-2016 15:18:41
            * and our key was used
            *
            * variable "_jwtValidButExpired" generated by jwt.io website
            */

            _jwtValidButExpired =
                "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2dpbiI6ImN6d2FydHkiLCJwYXNzd29yZCI6ImN6d2FydHkiLCJwcm9qZWN0LWd1aWQiOiIwMTIzNDU2Ny04OUFCLUNERUYtMDEyMy00NTY3ODlBQkNERUYiLCJleHAiOjE0Njk1MzkxMjF9.CGtKXTlYWgx2ZNdGShFlXm7Tl0yNv6TlaYesUQGzvJY";

            /* "login": "czwarty",
            * "password": "czwarty",
            * "project-guid": "01234567-89AB-CDEF-0123-456789ABCDEF"
            * "exp": 2132226191 -- should work till 26-07-2037 13:03:11 :-)
            *  and "definitely_not_our_key" key was used
            *
            * variable "_jwtSignedWithWrongKey" generated by jwt.io website
            */

            _jwtSignedWithWrongKey =
                "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2dpbiI6ImN6d2FydHkiLCJwYXNzd29yZCI6ImN6d2FydHkiLCJwcm9qZWN0LWd1aWQiOiIwMTIzNDU2Ny04OUFCLUNERUYtMDEyMy00NTY3ODlBQkNERUYiLCJleHAiOjIxMzIyMjYxOTF9.bDlcSdMQMGuSZUmU7QhS1bjeHbNxSt23HiO28mxtR0M";
        }

        [Fact]
        public void VerifyTokenShouldReturnWrongAccessToken()
        {
            // arrange
            var projectRepositoryMock = new Mock<IProjectRepository>();
            projectRepositoryMock.Setup(repo => repo.FindBy(It.IsAny<Expression<Func<Project, bool>>>()))
                                 .Returns(new List<Project>());

            var userRepositoryMock = new Mock<IUserRepository>();
            userRepositoryMock.Setup(repo => repo.FindBy(It.IsAny<Expression<Func<User, bool>>>()))
                                .Returns(new[] { new User { Login = "login", Password = "password", Status = UserStatus.Active } });
            //TODO:repair
            var tokenService = new TokenService(userRepositoryMock.Object, projectRepositoryMock.Object, _jwtLibraryWrapperService, _logger, null, null, null,null);

            // act
            string jsonResult = tokenService.VerifyToken(_jwtValid, new Guid());
            var deserialized = JsonConvert.DeserializeObject<JsonObject>(jsonResult);

            // assert
            Assert.Equal(JsonValues.WrongAccessToken, deserialized.Result);
            Assert.Null(deserialized.Jwt);
            Assert.Null(deserialized.ErrorDetails);
        }
    }
}